name: Build and Tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Run Gradle build
      - name: Build with Gradle
        run: ./gradlew build

      # Run tests (optional)
      - name: Run tests
        run: ./gradlew test

      # Consolidated step to get the latest tag, calculate the next version, and create a new tag
      - name: Tag and push new version
        id: tag_logic
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "1.0.0")
          echo "Latest tag: ${TAG}"

          # Split the tag into major, minor, and patch
          VERSION_REGEX="^([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $TAG =~ $VERSION_REGEX ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            echo "No valid version found, starting with 1.0.0"
            MAJOR=1
            MINOR=0
            PATCH=0
          fi

          # Determine version increment based on commit messages
          if git log -1 --pretty=%B | grep -q "MAJOR:"; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif git log -1 --pretty=%B | grep -q "MINOR:"; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi

          NEW_TAG="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New tag will be: ${NEW_TAG}"

          # Create and push the new tag
          git tag $NEW_TAG
          git push origin $NEW_TAG
